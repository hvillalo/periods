---
title: "Extracción y modelación de periodicidades en series de tiempo regulares. El paquete 'periods'"
format: 
  gfm:
    toc: false
editor: visual
bibliography: references.bib
---

## Instalación

El paquete **periods** es la implementación en R del método presentado en \@GonzalezRodriguez2015. Se puede instalar desde github con ayuda de **devtools**, el cual a su vez se instala de la manera habitual en caso de no estar ya disponible.

```{r, eval=FALSE}
install.packages("devtools") # si aun no está instalado

library(devtools)
install_github("hvillalo/periods") #instalación desde github
```

## Ejemplo de uso

### Serie simulada

El paquete incluye una serie de tiempo simulada (n = 220) media = 0, sin tendencia lineal y cuatro componentes armónicos definidos por los parámetros: periodos = 25, 10, 16, 73; amplitudes = 40, 20, 10, 5; fases = 2, 5, 1, 0;. Adicionalmente se añadió un 10 % de ruido aleatorio. Una vez cargado el paquete, la serie se puede cargar en memoria con la función `data()`.

```{r}
library(periods)

# Serie simulada
data(sim)

# gráfica 
plot(sim, type = "l")
```

**Búsqueda de periodicidades con descenso cíclico**

El primer paso del análisis consiste en buscar los periodos dominantes en la serie de tiempo. De esto se encarga la función `cyclicDescent()`, a la que la basta con que se especifique el vector de la serie de tiempo a procesar.

```{r}
sim.cd <- cyclicDescent(x=sim)
```

El resultado es una lista con los componentes armónicos encontrados y las pruebas de significancia estadística del aumento de R^2^ entre modelos sucesivos.

```{r}
# componentes armónicos
sim.cd$harmonics

# estadísticos
sim.cd$Stats
```

Como puede verse, el aumento en R^2^ al pasar del Modelo 4 (con cuatro componentes armónicos) al Modelo 5, no es significativo, por lo que este último se descarta.

La función `cyclicDescent()` tiene muchos argumentos más, cuyo uso se puede consultar en la ayuda del paquete (`?cyclicDescent`) o en la publicación mencionada (ver carpeta `doc`). Como ejemplo, se puede invocar solicitando los gráficos de cada modelo sucesivo encontrado:

```{r}
cyclicDescent(sim, plots = "all")
```

### Ajuste del modelo final por regresión lineal múltiple

Una vez encontrados lo periodos significativos, se procede al ajuste del modelo final, donde se hace la estimación de los parámetros a y b de cada armónico, y en su caso de la tendencia lineal, al mismo tiempo. Este modelo corresponde a la llamada regresión periódica y se ajusta por regresión lineal múltiple con la función `lm()`, en este caso modificada para ajustar el modelo:

$$ X_e = \alpha + \beta t + \sum_{i=1}^m \bigg(a_i \cdot cos(2\pi p_i^{-1}t) + b_i \cdot sin(2\pi p_i^{-1}t) \bigg) $$

```{r}
op <- sim.cd$harmonics$Period[1:4] # solo interesan los primeros 4 periodos 
sim.fit <- lm.harmonics(x = sim, periods = op, trend = FALSE)
sim.fit
```

`sim.fit` es un objeto de clase `lm`, que preferimos mantener para aprovechar toda la maquinaria desarrollada en R para modelos lineales. Por ejemplo, podemos revisar la tabla de regresión resultante

```{r}
summary(sim.fit)
```

A partir de a~i~ y b~i~ podemos calcular las amplitudes y fases correspondientes a través de la función `makeHarmonics()`.

```{r}
# generar armónicos
harmonics <- makeHarmonics(sim.fit)
harmonics
```

La figura del modelo final se puede mediante el siguiente código:

```{r}
# Plot final
R2 <- as.numeric(formatC(summary(sim.fit)$r.squared, digits=3))
stat <- summary(sim.fit)$fstatistic
pval <- pf(stat[1], stat[2], stat[3], lower.tail = FALSE)
pval <- format.pval(pval, digits = max(3, getOption("digits") - 3))

main.t <- paste("Periods =", paste(formatC(op, digits=3), collapse=", "))
sub.t <- substitute(paste(R^2, " = ", R2, " ; ", "p-value: ", pval), 
                    list( R2 = R2, pval = pval ))

par(mfrow = c(1, 1))
plot(sim, type = "n", main = main.t)
grid()
lines(sim, type = "b", col = "grey30")
lines(fitted(sim.fit), col = "blue")
mtext(sub.t, side = 3)
```

Mayores detalles del método se pueden revisar en la publicación de \@GonzalezRodriguez2015.

**Referencias**
